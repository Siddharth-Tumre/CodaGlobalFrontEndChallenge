{"version":3,"sources":["components/CardComponent.js","components/DishDetailComponent.js","shared/dishes.js","components/MainComponent.js","App.js","serviceWorker.js","index.js"],"names":["CardHeader","this","props","label","image","style","backgroundImage","width","id","className","React","Component","Button","CardBody","title","text","CardComponent","dish","name","description","DishDetail","dishes","console","log","display","flexWrap","margin","map","DISHES","Main","state","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3cf46b82.chunk.js","sourcesContent":["import React from 'react'\r\nimport \"./CardStyles.scss\"\r\n\r\nconst CardComponent = ({dish}) => {\r\n    return (\r\n        <article className=\"card\">\r\n          <CardHeader image={dish.image} label={dish.label}/>\r\n          <CardBody title={dish.name} text={dish.description}/>\r\n        </article>\r\n    )\r\n}\r\n\r\nclass CardHeader extends React.Component {\r\n    render() {\r\n      const {label, image } = this.props;\r\n      var style = { \r\n          backgroundImage: 'url(' + image + ')',\r\n          width: 'auto'\r\n      };\r\n      return (\r\n        <header style={style} id={image} className=\"card-header\">\r\n          <h4 className=\"card-header--title\">{label}</h4>\r\n        </header>\r\n      )\r\n    }\r\n  }\r\n  \r\n  class Button extends React.Component {\r\n    render() {\r\n      return (\r\n        <button className=\"button button-primary\">Find out more</button>\r\n      )\r\n    }\r\n  }\r\n  \r\n  class CardBody extends React.Component {\r\n    render() {\r\n      return (\r\n        <div className=\"card-body\">\r\n          \r\n          <h2>{this.props.title}</h2>\r\n          \r\n          <p className=\"body-content\">{this.props.text}</p>\r\n          \r\n          <Button />\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n\r\nexport default CardComponent","import React from \"react\"\r\nimport CardComponent from \"./CardComponent\"\r\n\r\nconst DishDetail = ({dishes}) => {\r\n    console.log(dishes)\r\n    return (\r\n        <div style={{display: 'flex', flexWrap: 'wrap', width:'920px', margin:'auto'}}>\r\n                {dishes.map(dish => (\r\n                    <CardComponent dish={dish}/>\r\n                ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DishDetail","export const DISHES = [   {\r\n    \"id\":0,\r\n    \"name\":\"Uthappizza\",\r\n    \"image\":\"https://i.imgur.com/tDnjTXf.jpg\",\r\n    \"category\":\"mains\",\r\n    \"label\":\"Hot\",\r\n    \"price\":\"4.99\",\r\n    \"description\":\"A unique combination of Indian Uthappam (pancake) and Italian pizza\"\r\n \r\n},\r\n {\r\n    \"id\":1,\r\n    \"name\":\"Zucchipakoda\",\r\n    \"image\":\"https://i.imgur.com/xkUElXq.jpg\",\r\n    \"category\":\"appetizer\",\r\n    \"label\":\"\",\r\n    \"price\":\"1.99\",\r\n    \"description\":\"Deep fried Zucchini coated with mildly spiced Chickpea flour batter accompanied with a sweet-tangy tamarind sauce\"\r\n \r\n},\r\n {\r\n    \"id\":2,\r\n    \"name\":\"Vadonut\",\r\n    \"image\":\"https://i.imgur.com/anUAlqF.jpg\",\r\n    \"category\":\"appetizer\",\r\n    \"label\":\"New\",\r\n    \"price\":\"1.99\",\r\n    \"description\":\"A quintessential ConFusion experience, is it a vada or is it a donut?\"\r\n \r\n},\r\n {\r\n    \"id\":3,\r\n    \"name\":\"ElaiCheese Cake\",\r\n    \"image\":\"https://i.imgur.com/c5hBTEW.jpg\",\r\n    \"category\":\"dessert\",\r\n    \"label\":\"\",\r\n    \"price\":\"2.99\",\r\n    \"description\":\"A delectable, semi-sweet New York Style Cheese Cake, with Graham cracker crust and spiced with Indian cardamoms\"\r\n \r\n},\r\n {\r\n    \"id\":4,\r\n    \"name\":\"Guntur chillies\",\r\n    \"image\":\"https://i.imgur.com/Vc9JIXP.jpg\",\r\n    \"category\":\"appetizer\",\r\n    \"label\":\"Spicy\",\r\n    \"price\":\"0.99\",\r\n    \"description\":\"Assorted chillies from Guntur\"\r\n \r\n},\r\n {\r\n    \"id\":5,\r\n    \"name\":\"Buffalo Paneer\",\r\n    \"image\":\"https://i.imgur.com/pH2tkgk.jpg\",\r\n    \"category\":\"appetizer\",\r\n    \"label\":\"\",\r\n    \"price\":\"5.99\",\r\n    \"description\":\"A special type of Paneer made from Buffalo milk\"\r\n \r\n},\r\n {\r\n    \"id\":6,\r\n    \"name\":\"Cherry Tomatoes\",\r\n    \"image\":\"https://i.imgur.com/fRy8hjE.jpg\",\r\n    \"category\":\"clone\",\r\n    \"label\":\"clone\",\r\n    \"price\":\"9.99\",\r\n    \"description\":\"clone of cherry and tomato\"\r\n \r\n},\r\n {\r\n    \"id\":7,\r\n    \"name\":\"Goat Milk\",\r\n    \"image\":\"https://i.imgur.com/zFGPhrI.jpg\",\r\n    \"category\":\"weird\",\r\n    \"label\":\"weird\",\r\n    \"price\":\"1.99\",\r\n    \"description\":\"Medicinal Goat Milk\"\r\n \r\n},\r\n {\r\n    \"id\":8,\r\n    \"name\":\"Rose breasted Grosbeak chicken\",\r\n    \"image\":\"https://i.imgur.com/RYsqgoo.jpg\",\r\n    \"category\":\"appetizer\",\r\n    \"label\":\"New\",\r\n    \"price\":\"7.99\",\r\n    \"description\":\"Roasted rare bird\"\r\n \r\n},\r\n {\r\n    \"id\":9,\r\n    \"name\":\"Toenail Zingy\",\r\n    \"image\":\"https://i.imgur.com/IpG3YOT.jpg\",\r\n    \"category\":\"appetizer\",\r\n    \"label\":\"weird\",\r\n    \"price\":\"0.99\",\r\n    \"description\":\"Cooked Toenails of various animals\"\r\n \r\n}\r\n]","import React, {Component} from 'react'\r\nimport DishDetail from \"./DishDetailComponent\"\r\nimport {DISHES} from '../shared/dishes'\r\n\r\nclass Main extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            dishes: DISHES\r\n        }\r\n    }\r\n\r\n      render() {\r\n          const {dishes} = this.state;\r\n            return (\r\n                <div style={{margin: '80px 0px'}}>\r\n                    <DishDetail dishes={dishes} />\r\n                </div>\r\n            );\r\n      }\r\n}\r\n\r\nexport default Main","import React from 'react';\nimport './App.css';\nimport Main from './components/MainComponent'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}